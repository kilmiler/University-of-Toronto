# -*- coding: utf-8 -*-
"""Assignment1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1VuPbV8096xM0vbvja9JmWjeH0yiTu4WW

# All Together !!! (Moved All Individual Sections to Assignment1_Practice.ipynb file
"""


#IMPORTING LIBRARIES AND DATA, DATA EXTRACTION
import numpy as np
import array
from numpy.linalg import norm
import matplotlib.pyplot as plt

from sklearn.datasets import load_breast_cancer
data = load_breast_cancer()

#Separated only the actual Data from the Dataset
Training_set = data.data


#HELPER FUNCTIONS
#Distance for each Sample to its Centroid
def distFunc(x1, x2):
  return np.sqrt(np.sum(x1-x2)**2)

#Returns an Array of Indicies for each Sample to its Closest Centroid 
def cluster_assignment(Training_set, clusterCentroids, k):
  c1= []
  for i in range(len(Training_set)):
    c2=[]
    for j in range(k):
      distances = distFunc(Training_set[i], clusterCentroids[j])
      c2.append(distances)
    c1.append(np.argmin(c2)) # index = np.argmin(c2)
  return c1

#Returns an Array of k Arrays that contain the (30 Dimensional) Coordinates of the Mean of Clustered Points
def move_centroid(Training_set, closest, k):
  c1 = []
  for i in range(k): # for each cluster,
    c1.append(np.mean([Training_set[j] for j in range(len(Training_set)) if closest[j] == i], axis=0))
    # [Training_set[j] for j in range(len(Training_set)) if closest[j] == i] 
    # --> Array listing Arrays of all Closest Samples' Coordinates for each Cluster
  return c1


#K-MEANS ALGORITHM 
#K-Means Function
def K_MEANS(Training_set, k):
  #Initializing Random Cluster Centroids using method B from lecture
  clusterCentroids = Training_set[np.random.choice(len(Training_set), k, replace=False)]

  for i in range(100):
    closest = cluster_assignment(Training_set, clusterCentroids, k)
    clusterCentroids = move_centroid(Training_set, closest, k)
    clusterCentroids = np.array(clusterCentroids)
  
  #saved closest and clusterCentroids for Plotting and Distortion calculation
  return closest, clusterCentroids


#RUN K-MEANS (saved closest and clusterCentroids for Plotting and Distortion calculation)
closest, clusterCentroids = K_MEANS(Training_set, 7)
#k=7 (For Q1-2)

"""*   I have used the Dataset UCI ML Breast Cancer Wisconsin dataset & **k=7** as the input to the K-Means Algorithm
*   Plot: You can see that there are 7 Cluster Centroids and Samples assigned to 7 Clusters 
*   Centroids: You can see that there are 7 Centroids each with 30 Dimensions
*   Cluster Assignments: You can see that there are 569 Samples each Closest to (Clustered to) either the 1st, 2nd, 3rd, 4th, 5th, 6th, 7th Centroid


"""

#PLOTTING SAMPLES WITH CLUSTERING & CLUSTERING CENTROIDS
#Plot to check if Clustering is Working (Just in 2 Dimensional Graph)
plt.scatter(Training_set[:, 0], Training_set[:, 1], c=closest)
plt.scatter(clusterCentroids[:, 0], clusterCentroids[:, 1], c='r')

print(clusterCentroids)

print(len(closest))
print(closest)


#OPTIMIZATION OBJECTIVE FUNCTION (DISTORTION)
#Optimization Objective Function to measure Distortion of K-means
def objFunc(Training_set, k):
  closest, clusterCentroids = K_MEANS(Training_set, k)

  sum = 0
  for i in range(len(Training_set)):
    for j in range(k):
      if closest[i] == j:
        sum = sum + (norm(Training_set[i]-clusterCentroids[j]))**2
  distortion = sum/len(Training_set)
  return distortion

#JUST FOR TESTING
#objFunc(Training_set, clusterCentroids, 7)

distortion_vals = [objFunc(Training_set, 2), 
                   objFunc(Training_set, 3),
                   objFunc(Training_set, 4), 
                   objFunc(Training_set, 5), 
                   objFunc(Training_set, 6),
                   objFunc(Training_set, 7)]

x = [2, 3, 4, 5, 6, 7]
y = [distortion_vals[0], distortion_vals[1], distortion_vals[2], distortion_vals[3], distortion_vals[4], distortion_vals[5]]

plt.plot(x, y)

"""If I had to choose one k value, I would choose k=4 because it is the Elbow point in the Elbow method where to pick the optimal number of clusters.

The Elbow point is used as the optimal cutoff where the Distortion reduction is not worth the cost of increasing the number of clusters. As seen in the graph, k=4 is the point of inflection.
"""